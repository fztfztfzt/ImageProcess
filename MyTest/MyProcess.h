#pragma once
#include "MyBitmap.h"
#include "algorithm"
#include "cmath"
#include <complex>
#define PI 3.1415926
struct KERNEL//�˲�ģ���ṹ
{
	int Element[3][3];//ģ��Ԫ��
	int Divisor;//���Ե�ϵ��
	int Dimension;//ά��
};
//�˲�ģ��
const KERNEL kernel[]={
	{   0,1,0,
		1,1,1,
		0,1,0,
		5,3
	},
	{
		1,1,1,
		1,0,1,
		1,1,1,
		8,3
	},
	{
		1,1,1,
		1,1,1,
		1,1,1,
		9,3
	},
	{
		1,1,1,
		1,2,1,
		1,1,1,
		10,3
	},
	{/////////////////��˹�˲�ģ�� �±�4
		1,2,1,
		2,4,2,
		1,2,1,
		16,3
	},
/////////////��������ģ��
		{///������˹����  �±�5
			-1,-1,-1,
			-1,8,-1,
			-1,-1,-1,
			9,3
		},
		{	
			-2,-2,-2,
			-2,16,-2,
			-2,-2,-2,
			9,3
		},
	//////����Ч��ģ�� �±�7��13
			{-1,0,0,
			0,0,0,
			0,0,1,
			1,3
			},
			{1,0,0,
			0,0,0,
			0,0,-1,
			1,3
			},
			{0,0,-1,
			0,0,0,
			1,0,0,
			1,3
			},
			{0,0,1,
			0,0,0,
			-1,0,0,
			1,3
			},
			{-1,0,-1,
			0,0,0,
			1,0,1,
			1,3
			},
			{-1,0,1,
			0,0,0,
			1,0,-1,
			1,3
			},
			{1,0,1,
			0,0,0,
			-1,0,-1,
			1,3
			},
			{1,0,-1,
			0,0,0,
			-1,0,1,
			1,3
			}


};
//Kirsch������������
const KERNEL kernel_kirsch[]={
	{5,5,5,
	-3,0,-3,
	-3,-3,-3,
	1,3},
	{-3,5,5,
	-3,0,5,
	-3,-3,-3,
	1,3},
	{-3,-3,5,
	-3,0,5,
	-3,-3,5,
	1,3},
	{-3,-3,-3,
	-3,0,5,
	-3,5,5,
	1,3}
};
//��ʴOR��������
const KERNEL kernel_erosion[]=
{
	//��ֱ����
	{0,1,0,
	0,1,0,
	0,1,0,
	1,3
	},
	//ˮƽ����
	{0,0,0,
	1,1,1,
	0,0,0,
	1,3
	},
	//ʮ����
	{0,1,0,
	1,1,1,
	0,1,0,
	1,3
	},
	//8����
	{1,1,1,
	1,1,1,
	1,1,1,
	1,3
	}
};
class MyProcess
{
public:
	/************************************************************************/
	/* �������ƣ� GetGray()
		������ MyBitmap myBmp --------��������24λbmpλͼ
		unsigned char* srcchar --------���ŻҶ�ͼ��������
		����ֵ ��
		˵�� �� �ú��������õ�24Ϊλͼ�ĻҶ�ͼ��
	/************************************************************************/
	void GetGray(MyBitmap myBmp,unsigned char *srcchar);//������ͼ��ת��Ϊ�Ҷ�ͼ��ֻ����24λbmp


	/************************************************************************/
	/* �������ƣ� GetGrayIntensity()
		������ unsigned char *gray --------�������ĻҶ�ͼ
		int *grayInt --------���ŻҶ�ֱ��ͼ������
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		����ֵ ��
		˵�� �� �ú��������õ��Ҷ�ͼ����ֱ��ͼ
	/************************************************************************/
	void GetGrayIntensity(unsigned char *gray,int *grayInt,LONG width,LONG height);//�õ��Ҷ�ͼ�ĻҶ�ֱ��ͼ

	/************************************************************************/
	/* �������ƣ� GetIntensity()
		������ unsigned char *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		int *R,int *G,int *B -------���Ÿ�������ֱ��ͼ������
		����ֵ ��
		˵�� �� �ú��������õ���ɫͼ����ֱ��ͼ
	/************************************************************************/
	void GetIntensity(unsigned char *bmp,LONG width,LONG height,int *R,int *G,int *B);


	/************************************************************************/
	/* �������ƣ� ShowArrayToDevice()
		������ CDC *dc --------�豸����
		int x, int y ----------��ʾ��λ��
		unsigned char* srcchar --------����ͼ��������
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		int type ----ͼ������ 0---��ɫ��1---�Ҷ�,Ĭ���ǻҶ�ͼ
		����ֵ ��
		˵�� �� �ú����������豸��ָ��λ������ʾͼ��
	/************************************************************************/
	void ShowArrayToDevice(CDC *dc, int x, int y,unsigned char *array,LONG width,LONG height,int type=1);//��ͼ��������ʾ���豸��


	/************************************************************************/
	/* �������ƣ� PointInvert()
		������ unsigned char *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		����ֵ ��
		˵�� �� �ú�����ͼ�����з�ɫ�任����,ע�⣺���ı�ԭͼƬ
	/************************************************************************/
	void PointInvert(unsigned char *bmp,LONG width,LONG height);


	/************************************************************************/
	/* �������ƣ� GrayStretch()
		������ unsigned char *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		BYTE bx1 -------����1��ԭʼ�Ҷ�
		BYTE by1
		����ֵ ��
		˵�� �� �ú�����ͼ���������߱任������0-255�Ҷ�ӳ�䵽��һ����Χ��
	/************************************************************************/
	void GrayStretch(unsigned char *bmp,LONG width,LONG height,BYTE bx1,BYTE by1,BYTE bx2,BYTE by2);

	/************************************************************************/
	/* �������ƣ� WindowTrans()
		������ unsigned char *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		BYTE bLow	 -------- ��������
		BYTE bUp	 -------- ��������
		����ֵ ��
		˵�� �� ��ͼ�����лҶȴ��ڱ任����С������Ϊ0����������Ϊ255���м����Ա任
	/************************************************************************/
	void WindowTrans(BYTE *bmp,LONG width,LONG height ,BYTE bLow,BYTE bUp);

	/************************************************************************/
	/* �������ƣ� DynamicCompress()
		������ unsigned char *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		int C --------- �����Ա任��������
		����ֵ ��
		˵�� �� ��ͼ�����з����Ա任 ��ʽ��D0=EH(D1)=Clog(1+|D1|),���ڶ�̬��Χ����ʱ
	/************************************************************************/
	void DynamicCompress(BYTE *bmp,LONG width,LONG height,int C);

	/************************************************************************/
	/* �������ƣ� PointEqua()
		������ BYTE *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		int type --------ͼ�����ͣ�0��24λ��ɫ��1���Ҷ�
		����ֵ ��
		˵�� �� ��ͼ�����о����任
	/************************************************************************/
	void PointEqua(BYTE *bmp,LONG width,LONG height,int type=0);
	/************************************************************************/
	/* �������ƣ� PointEqua()
		������ BYTE *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
		BYTE bNum ----�涨ֱ��ͼ�Ҷȼ���
		int *Nu-------�涨ֱ��ͼ�Ҷ�ӳ����ϵ
		float *Pu-----�涨ֱ��ͼ���Ҷȵķֲ�����
		int type --------ͼ�����ͣ�0��24λ��ɫ��1���Ҷ�
		����ֵ ��
		˵�� �� ��ͼ�����е�ӳ������ֱ��ͼ�涨���任
	/************************************************************************/
	void PointSML(BYTE *bmp,LONG width,LONG height,BYTE bNum,int *Nu,float *Pu,int type=0);
	
	/*************************************************************************
	*
	* �������ƣ�
	*   FFT()
	*
	* ����:
	*   complex<double> * TD	- ָ��ʱ��������ָ��
	*   complex<double> * FD	- ָ��Ƶ��������ָ��
	*   r						��2������������������
	*
	* ����ֵ:
	*   �ޡ�
	*
	* ˵��:
	*   �ú�������ʵ�ֿ��ٸ���Ҷ�任��
	*
 ************************************************************************/
	void FFT(std::complex<double>*TD,std::complex<double>*FD,int r);
	
	/*************************************************************************
	*
	* �������ƣ�
	*   IFFT()
	*
	* ����:
	*   complex<double> * FD	- ָ��Ƶ��ֵ��ָ��
	*   complex<double> * TD	- ָ��ʱ��ֵ��ָ��
	*   r						��2������
	*
	* ����ֵ:
	*   �ޡ�
	*
	* ˵��:
	*   �ú�������ʵ�ֿ��ٸ���Ҷ���任��
	*
	************************************************************************/
	void IFFT(std::complex<double> * FD, std::complex<double> * TD, int r);
	/*************************************************************************
	*
	* �������ƣ�
	*   Fourier()
	*
	* ����:
	*   complex* TD		- ������ʱ������
	*	 LONG lWidth		- ͼ������
	*	 LONG lHeight		- ͼ���߶�
	*	 complex* FD		- ������Ƶ������
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά���ٸ���Ҷ�任��
	*
	************************************************************************/
	BOOL Fourier(std::complex<double> * TD, LONG width, LONG height, std::complex<double> * FD);

	/*************************************************************************
	*
	* �������ƣ�
	*   IFourier()
	*
	* ����:
	*   LPBYTE TD			- ���صĿ�������
	*   LONG lWidth		- ����ͼ���Ŀ���
	*	 LONG lHeight		- ����ͼ���ĸ߶�
	*	 complex* FD		- ������Ƶ������
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά���ٸ���Ҷ���任��
	*
	************************************************************************/
	BOOL IFourier(LPBYTE TD, LONG width, LONG height, std::complex<double> * FD);

	/*************************************************************************
	*
	* �������ƣ�
	*   BmpFourier()
	*
	* ����:
	*   BYTE *bmp --------��������ͼ��
		LONG width,LONG height-------ͼ���Ŀ��Ⱥ͸߶�
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú���������ͼ�����и���Ҷ�任��
	*
	************************************************************************/
	BOOL BmpFourier(BYTE* bmp,LONG width,LONG height);
	/************************************************************************/
	/* ��ȥbmp��ʱ��                                                                     */
	/************************************************************************/
	BOOL BmpTD(BYTE *bmp,LONG width,LONG height,std::complex<double>*TD);
	/*************************************************************************
	*
	* �������ƣ�
	*   DCT()
	*
	* ����:
	*   double * f				- ָ��ʱ��ֵ��ָ��
	*   double * F				- ָ��Ƶ��ֵ��ָ��
	*   r						��2������
	*
	* ����ֵ:
	*   �ޡ�
	*
	* ˵��:
	*   �ú�������ʵ��һά������ɢ���ұ任
	*
	************************************************************************/
	void DCT(double *f, double *F, int r);
	
	/*************************************************************************
	*
	* �������ƣ�
	*   IDCT()
	*
	* ����:
	*   double * F				- ָ��Ƶ��ֵ��ָ��
	*   double * f				- ָ��ʱ��ֵ��ָ��
	*   r						��2������
	*
	* ����ֵ:
	*   �ޡ�
	*
	* ˵��:
	*   �ú���ʵ��һά������ɢ�������任
	*
	************************************************************************/
	void IDCT(double *F, double *f, int r);

	/*************************************************************************
	*
	* �������ƣ�
	*   FreqDCT()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*	 LONG width			- ͼ������
	*	 LONG h		- ͼ���߶�
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά������ɢ���ұ任��
	*
	************************************************************************/
	BOOL FreqDCT(double *f, double *F, LONG width, LONG height);

	/*************************************************************************
	*
	* �������ƣ�
	*   IFreqDCT()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*	 LONG width			- ͼ������
	*	 LONG height		- ͼ���߶�
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά������ɢ�������任��
	*
	************************************************************************/
	BOOL IFreqDCT(double *f, double *F, LONG lWidth, LONG lHeight);

	/*************************************************************************
	*
	* �������ƣ�
	*   DIBDCT()
	*
	* ����:
	*   BYTE* bmp,LONG width,LONG height
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú���������ͼ��������ɢ���ұ任��
	*
	************************************************************************/
	BOOL BmpDCT(BYTE* bmp,LONG width,LONG height);

	/*************************************************************************
	*
	* �������ƣ�
	*   WALSH()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*   int r				- 2������		
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�������һά�����ֶ�ʲ�����������任��
	*
	************************************************************************/
	void WALSH(double *f, double *F, int r);

	/*************************************************************************
	*
	* �������ƣ�
	*   IWALSH()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*   int r				- 2������		
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�������һά�����ֶ�ʲ�������������任��
	*
	************************************************************************/
	void IWALSH(double *F, double *f, int r);

	/*************************************************************************
	*
	* �������ƣ�
	*   FreqWALSH()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*	 LONG width			- ͼ������
	*	 LONG height		- ͼ���߶�
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά�����ֶ�ʲ�����������任��
	*
	************************************************************************/
	BOOL FreqWALSH(double *f, double *F, LONG width, LONG height);

	/*************************************************************************
	*
	* �������ƣ�
	*   IFreqWALSH()
	*
	* ����:
	*   double* f			- ������ʱ������
	*   double* F			- ������Ƶ������
	*	 LONG width		- ͼ������
	*	 LONG height		- ͼ���߶�
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú������ж�ά�����ֶ�ʲ�������������任��
	*
	************************************************************************/
	BOOL IFreqWALSH(double *f, double *F, LONG width, LONG height);

	/*************************************************************************
	*
	* �������ƣ�
	*   BmpWalsh()
	*
	* ����:
	*   BYTE* bmp,LONG width,LONG height
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�����ͼ�����ж�ά�����ֶ�ʲ�����������任��
	*
	************************************************************************/
	BOOL BmpWalsh(BYTE* bmp,LONG width,LONG height);

//////////////////////////////////////////////////////////////////////////
// ͼ����ǿ �˲�
//////////////////////////////////////////////////////////////////////////
	
	/*************************************************************************
	*
	* �������ƣ�
	*   KernelFilter()
	*
	* ����:
	*   BYTE* bmp,LONG width,LONG height ------ͼ������
		KERNEL kernel ---------ģ��
		int type ---------�����ж��Ƿ�Ҫ���и�������--Ҫ��ǿ�Աȶ�+128,Ĭ��Ϊ0����Ҫ
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE
	*
	* ˵��:
	*   �ú�����ͼ������ģ���˲���
	*
	************************************************************************/
	void KernelFilter(BYTE *bmp,LONG width,LONG height,KERNEL kernel,int type=0);

	/*************************************************************************
	*
	* �������ƣ�
	*   BmpFilter()
	*
	* ����:
	*   BYTE *srcBmp	--------ԭͼ��
		BYTE *desBmp	--------ת����ͼ��
		LONG width,LONG height ------ͼ������
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�����ԭͼ��ת��Ϊ��1������ͼ�񣬷�������ģ���˲���
	*
	************************************************************************/
	void BmpFilter(BYTE *desBmp,BYTE *srcBmp,LONG width,LONG height);

	/*************************************************************************
	* �������ƣ�
	*   MedianFilter()
	*
	* ����:
	*   BYTE* bmp,LONG width,LONG height ------ͼ������
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�����ͼ��������ֵ�˲���
	*
	************************************************************************/
	void MedianFilter(BYTE *bmp,LONG width,LONG height);

	/*************************************************************************
	* �������ƣ�
	*   ButterworthL()
	*
	* ����:
	*   BYTE* bmp,LONG width,LONG height ------ͼ������
		float fd -------�˲���ֵ
		int type -------��ͨ���Ǹ�ͨ  0--��ͨ��1--��ͨ
	*
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	*
	* ˵��:
	*   �ú�����ͼ�����в�����˹�˲���
	*
	************************************************************************/
	void ButterworthL(BYTE *bmp,LONG width,LONG height,float fd,int type=0);



	//////////////////////////////////////////////////////////////////////////
	// ͼ���ָ�
	//
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// ���б߽��ָ
	
	/*************************************************************************
	* �������ƣ�
	*   SplitRoberts()
	* ����:
	*   BYTE* bmp,LONG width,LONG height ------ͼ������
		int type ----��Ե�������� 0:�޲��ؽ������� 1:����ά�ر�Ե���� 2:��������Ե����
	
	* ����ֵ:
	*   BOOL               - �ɹ�����TRUE�����򷵻�FALSE��
	* ˵��:�ú�����ͼ�����б�Ե���⡣
	0�� 1  0      0 1                
		0 -1     -1 0 ����2*2���ӣ�����ֻ�ܶԾ��ж��͵ĵ�����ͼ�����кܺõ�Ч��
	1�� -1  0  1          1 1 1       ����3*3ģ�棬Ч�������޲��ؽ�������
		-1  0  1          0 0 0
		-1  0  1          1 1 1
	2�� -1  0  1          1 2 1       ����ǰ��2��
		-2  0  2          0 0 0
		-1  0  1          1 2 1
	������˹�������˲����У����ﲻ��ʵ�֣����ʺ�������������
	************************************************************************/
	void SplitRoberts(BYTE *bmp,LONG width,LONG height,int type=0);

	/*************************************************************************
	* ��������:SplitKirsch()
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
	* ����ֵ:��
	* ˵��:�ú�������Kirsch�������ӱ�Ե���⡣
	************************************************************************/
	void SplitKirsch(BYTE *bmp,LONG width,LONG height);

	/*************************************************************************
	* ��������:SplitContour()
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
	* ����ֵ:��
	* ˵��:������ȡ��8�������м�����һ������Ϊ��ɫ��Ϊ�Ǳ߽�
	************************************************************************/
	void SplitContour(BYTE *bmp,LONG width,LONG height);

	/*************************************************************************
	* ��������:HoufuLine()
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
	* ����ֵ:��
	* ˵��:Houfuֱ�߼���,ͼ������Ϊ�Ҷ�ͼ����ֱ����<128,������һ���ֱ��;
	************************************************************************/
	void HoufuLine(BYTE *bmp,LONG width,LONG height);

	//////////////////////////////////////////////////////////////////////////
	//���������ָ��㷨

	/*************************************************************************
	* ��������:Threshold()
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
	* ����ֵ:int ��ֵ�����ص�������ֵ
	* ˵��:���������ָ��������ֵ����ȡһ��ֵ���ָ�ͼ�񣬷ֱ����ֲ�ƽ��������������ֱ����ֵ����
	���ּ���ɢֵ��Ȩ��
	************************************************************************/
	int Threshold(BYTE *bmp,LONG width,LONG height);

	//////////////////////////////////////////////////////////////////////////
	//���������ָ�

	/*************************************************************************
	* ��������:RgnGrow() 
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
		BYTE c1,BYTE c2 ����1�����Ӷ���ֵ
	* ����ֵ:��
	* ˵��:���������ָ�������� �ԻҶ�ͼ���д���
	************************************************************************/
	void RgnGrow(BYTE *bmp,LONG width,LONG height,BYTE c1,BYTE c2);

	//////////////////////////////////////////////////////////////////////////
	//��ʴ������
	//////////////////////////////////////////////////////////////////////////
	
	/*************************************************************************
	* ��������:Erosion() 
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
		KERNEL array ��ʴ��������
	* ����ֵ:��
	* ˵��:��ͼ�����в�ͬ�����ĸ�ʴ����
	************************************************************************/
	void Erosion(BYTE *bmp,LONG width,LONG height,KERNEL array);

	/*************************************************************************
	* ��������:Dilation() 
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
		KERNEL array ���ͷ�������
	* ����ֵ:��
	* ˵��:��ͼ�����в�ͬ���������ʹ���
	************************************************************************/
	void Dilation(BYTE *bmp,LONG width,LONG height,KERNEL array);

	/*************************************************************************
	* ��������:OpenOperate() 
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
		KERNEL array ��������
	* ����ֵ:��
	* ˵��:��ͼ�����п����㣬���ȸ�ʴ������
	************************************************************************/
	void OpenOperate(BYTE *bmp,LONG width,LONG height,KERNEL array);

	/*************************************************************************
	* ��������:CloseOperate() 
	* ����:BYTE* bmp,LONG width,LONG height ------ͼ������
		KERNEL array ��������
	* ����ֵ:��
	* ˵��:��ͼ�����б����㣬���������ٸ�ʴ
	************************************************************************/
	void CloseOperate(BYTE *bmp,LONG width,LONG height,KERNEL array);
};